{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "23dc436f-682c-430f-989c-f94ac638a465",
   "metadata": {},
   "source": [
    "# Verify my Scripts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4df52cd5-7cce-4b11-a6ad-e1ea4f456531",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import importlib\n",
    "import Tools\n",
    "import time\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "O = 6000\n",
    "K = 10\n",
    "N = 2\n",
    "\n",
    "import warnings\n",
    "\n",
    "# Suppress specific RuntimeWarnings globally\n",
    "warnings.filterwarnings(\"ignore\", message=\"Values in x were outside bounds during a minimize step, clipping to bounds\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "64ae1ac9-3322-42b8-9cae-ac1dba320f30",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fitting Model: 100%|████████████████████████████| 20/20 [00:18<00:00,  1.08it/s]\n"
     ]
    }
   ],
   "source": [
    "from Tools import AR, CCC\n",
    "from EM import Base\n",
    "import pandas as pd\n",
    "sim = AR(n_states=N, K_series = K, num_obs = O, transition_diagonal=0.99, deterministic=True) #sigmas = [[0,0]]\n",
    "sim.simulate()\n",
    "model = Base(sim.data, max_iterations=20)\n",
    "model.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cc04e0f4-9662-4b09-a56b-55679d035694",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/august/.venvs/jupyter/lib/python3.11/site-packages/IPython/core/pylabtools.py:152: UserWarning: Creating legend with loc=\"best\" can be slow with large amounts of data.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1700x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([[8.07562563e-01, 1.92437437e-01],\n",
       "       [5.72984273e-05, 9.99942702e-01]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Example: Plotting smoothed probabilities for the first series (k=0)\n",
    "# Assuming u_hat is already computed and has shape (K, T, N)\n",
    "k = 0  # Index of the series you want to plot, adjust accordingly\n",
    "\n",
    "# Aggregate smoothed probabilities over K series if needed, here shown for a specific series\n",
    "# For aggregation, you might use: u_hat_mean = u_hat.mean(axis=0) for mean probabilities across series\n",
    "        # Set seaborn style for better aesthetics\n",
    "sns.set(style='whitegrid')\n",
    "# Determine unique states for coloring\n",
    "states = np.unique(sim.full_data[:, 0])\n",
    "colors = sns.color_palette(\"pastel\", len(states))\n",
    "\n",
    "# Create a color map based on states\n",
    "state_colors = {state: colors[i] for i, state in enumerate(states)}\n",
    "# Plotting\n",
    "plt.figure(figsize=(17, 4))\n",
    "\n",
    "\n",
    "# Shade the background based on states\n",
    "for t in range(model.T):\n",
    "    state = int(sim.full_data[t, 0])\n",
    "    plt.axvspan(t, t+1, color=state_colors[state], alpha=0.6)\n",
    "plt.plot(model.u_hat[k, :, 0], label=f'State {0}')\n",
    "\n",
    "plt.title('Smoothed Probabilities Over Time')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Probability')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "model.transition_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdafa09f-3e46-42c9-bb13-35b96047c12d",
   "metadata": {},
   "outputs": [],
   "source": [
    "for k in range()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dad67f65-b7d2-4daa-8a72-c3c5d3b7ca09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation when state == 0: 0.9851324547486799\n",
      "Correlation when state == 1: -0.9974918904766955\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[array([[1.        , 0.60768717],\n",
       "        [0.60768717, 1.        ]]),\n",
       " array([[ 1.        , -0.88444794],\n",
       "        [-0.88444794,  1.        ]])]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from Tools import AR, CCC\n",
    "from EM import Base\n",
    "import pandas as pd\n",
    "sim = RSDC(n_states=N, K_series = K, num_obs = O, transition_diagonal=0.99, deterministic=True) #sigmas = [[0,0]]\n",
    "# Assuming 'df' is your DataFrame with columns ['States', 'TimeSeries1', 'TimeSeries2']\n",
    "sim.simulate()\n",
    "\n",
    "# Filter the DataFrame based on the state\n",
    "df_state_0 = sim.full_df[sim.full_df['States'] == 0]\n",
    "df_state_1 = sim.full_df[sim.full_df['States'] == 1]\n",
    "\n",
    "# Calculate correlation for state 0\n",
    "corr_state_0 = df_state_0[['Returns 0', 'Returns 1']].corr().iloc[0, 1]\n",
    "\n",
    "# Calculate correlation for state 1\n",
    "corr_state_1 = df_state_1[['Returns 0', 'Returns 1']].corr().iloc[0, 1]\n",
    "\n",
    "print(\"Correlation when state == 0:\", corr_state_0)\n",
    "print(\"Correlation when state == 1:\", corr_state_1)\n",
    "sim.rho_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "88f4ddd4-115f-45bb-9187-49810441f3d4",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from importlib import reload\n",
    "reload(Tools)\n",
    "from Tools import RSDC, CCC\n",
    "# phi_vals = np.zeros((K,N))\n",
    "sim = RSDC(n_states=N, K_series = K, num_obs = O, transition_diagonal=0.99, deterministic=True) #sigmas = [[0,0]]\n",
    "sim.simulate()\n",
    "ccc = CCC(sim.data)\n",
    "ccc.fit()\n",
    "ccc.minimize_correlation()\n",
    "# reload(EM)\n",
    "# from EM import Base\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "72553ac2-ad9e-44ab-a997-e1e5cd0959dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[ 1.        , -0.70196665,  0.40988861, -0.77349373,  0.82259022],\n",
       "        [-0.70196665,  1.        , -0.58566007,  0.7651599 , -0.67947226],\n",
       "        [ 0.40988861, -0.58566007,  1.        , -0.58196597,  0.58037225],\n",
       "        [-0.77349373,  0.7651599 , -0.58196597,  1.        , -0.81629085],\n",
       "        [ 0.82259022, -0.67947226,  0.58037225, -0.81629085,  1.        ]])]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sim.rho_matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "296ac868-b3a6-45c9-b093-af7ae128dbe4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.88392624, -0.98999987,  0.02307082,  0.80781452, -0.1133506 ,\n",
       "        0.02307019, -0.98999999, -0.99      ,  0.98539415, -0.79200012])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ccc.ccc_estimate.x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a559e20f-d591-459c-b263-4bbf068ebcd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.        ,  0.88392624, -0.98999987,  0.02307082,  0.80781452],\n",
       "       [ 0.88392624,  1.        , -0.1133506 ,  0.02307019, -0.98999999],\n",
       "       [-0.98999987, -0.1133506 ,  1.        , -0.99      ,  0.98539415],\n",
       "       [ 0.02307082,  0.02307019, -0.99      ,  1.        , -0.79200012],\n",
       "       [ 0.80781452, -0.98999999,  0.98539415, -0.79200012,  1.        ]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ccc.R_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d4de07b0-de63-4941-bfd7-0277f8ee5e9c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Fitting Model: 100%|████████████████████████| 1000/1000 [55:53<00:00,  3.35s/it]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "# Suppress specific RuntimeWarnings globally\n",
    "warnings.filterwarnings(\"ignore\", message=\"Values in x were outside bounds during a minimize step, clipping to bounds\")\n",
    "# Adjusting the provided snippet to handle all off-diagonal values of the sim.rho matrix\n",
    "sim_count = 1000\n",
    " # Updated to demonstrate the calculation for a 3x3 matrix (assuming this is what you meant by handling all off-diagonal values)\n",
    "num_params = int(K * (K - 1) / 2)\n",
    "\n",
    "# Initialize the array to store the off-diagonal values of sim.rho_matrix and ccc.ccc_estimate.x\n",
    "# Note: Assuming `ccc.ccc_estimate.x` can return multiple values, otherwise, the storing logic might need adjustment\n",
    "results = np.zeros((sim_count, num_params * 2))  # Updated to hold all off-diagonal values and corresponding estimates\n",
    "\n",
    "for i in tqdm(range(sim_count), desc='Fitting Model'):\n",
    "    # Simulate the RSDC model\n",
    "    sim = RSDC(n_states=N, K_series=K, num_obs=O, transition_diagonal=0.99, deterministic=True)\n",
    "    sim.simulate()\n",
    "    \n",
    "    # Fit the CCC model\n",
    "    ccc = CCC(sim.data)\n",
    "    ccc.fit()\n",
    "    ccc.minimize_correlation()\n",
    "    \n",
    "    # Extract the off-diagonal values of sim.rho_matrix\n",
    "    rho_off_diagonal_values = sim.rho_matrix[0][np.triu_indices(K, k=1)]\n",
    "    \n",
    "    # Assuming ccc_estimate.x returns a flat array of estimates corresponding to the off-diagonal values\n",
    "    ccc_estimates = ccc.ccc_estimate.x\n",
    "    \n",
    "    # Store the off-diagonal values and ccc_estimate.x in the results array\n",
    "    results[i, :num_params] = rho_off_diagonal_values\n",
    "    results[i, num_params:] = ccc_estimates\n",
    "\n",
    "# Calculate the differences for each off-diagonal pair\n",
    "differences = results[:, :num_params] - results[:, num_params:]\n",
    "\n",
    "# Flatten the differences to get a single histogram for all off-diagonal comparisons\n",
    "differences_flat = differences.flatten()\n",
    "\n",
    "# Create a histogram of the flattened differences\n",
    "plt.hist(differences_flat, bins='auto')\n",
    "plt.title('Histogram of All sim.rho Off-Diagonal - ccc_estimate.x Differences')\n",
    "plt.xlabel('Difference')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "97d34a19-3fab-4a4f-89af-78434339a1d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a histogram of the flattened differences\n",
    "plt.hist(differences_flat, bins='auto')\n",
    "plt.title('Histogram rho Estimates With 5 Series')\n",
    "plt.xlabel('Difference')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8817dc5e-48d9-40e5-ab00-88c935a81c78",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29ac1fa3-e775-497f-b278-91341e24c62d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72931cdc-4689-4394-a9d8-0cfc555ebe71",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5f8815bd-7d85-4f96-9bd2-e3a4928a70ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# my = np.zeros((5,3))\n",
    "# my[:,0] = sim.omega\n",
    "# my[:,1] = sim.alpha\n",
    "# my[:,2] = sim.beta\n",
    "# print(my)\n",
    "# ccc.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9db8b8c1-c0bb-4370-af0e-878c4595c0fe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37dfefb7-8bde-46d7-8ce9-b6342876a746",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86df733a-49ce-4fea-bacc-e2cf11ca959b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a4bd195-b638-48ab-befc-03e2aac33ac6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a129a95a-8884-44c4-86aa-070b42f42506",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46e3f3ab-3f1b-470b-956c-c8900f2aa3f8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "98b50e0d-f23a-4821-aa7b-a7065c26999b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# print('Simulated')\n",
    "# model = Base(sim.data, max_iterations=2)\n",
    "# model.fit()\n",
    "# # Example: Plotting smoothed probabilities for the first series (k=0)\n",
    "# # Assuming u_hat is already computed and has shape (K, T, N)\n",
    "# k = 0  # Index of the series you want to plot, adjust accordingly\n",
    "\n",
    "# # Aggregate smoothed probabilities over K series if needed, here shown for a specific series\n",
    "# # For aggregation, you might use: u_hat_mean = u_hat.mean(axis=0) for mean probabilities across series\n",
    "#         # Set seaborn style for better aesthetics\n",
    "# sns.set(style='whitegrid')\n",
    "\n",
    "# # Determine unique states for coloring\n",
    "# states = np.unique(sim.full_data[:, 0])\n",
    "# colors = sns.color_palette(\"pastel\", len(states))\n",
    "\n",
    "# # Create a color map based on states\n",
    "# state_colors = {state: colors[i] for i, state in enumerate(states)}\n",
    "# # Plotting\n",
    "# plt.figure(figsize=(17, 4))\n",
    "\n",
    "\n",
    "# # Shade the background based on states\n",
    "# for t in range(model.T):\n",
    "#     state = int(sim.full_data[t, 0])\n",
    "#     plt.axvspan(t, t+1, color=state_colors[state], alpha=0.6)\n",
    "# plt.plot(model.u_hat[k, :, 0], label=f'State {0}')\n",
    "\n",
    "# plt.title('Smoothed Probabilities Over Time')\n",
    "# plt.xlabel('Time')\n",
    "# plt.ylabel('Probability')\n",
    "# plt.legend()\n",
    "# plt.show()\n",
    "# model.transition_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4aacf006-eceb-428f-95c4-088a6bb5dfdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "# sim = AR(n_states=N, K_series = K, num_obs = O, transition_diagonal=0.99, deterministic=True) #sigmas = [[0,0]]\n",
    "# sim.simulate()\n",
    "# model = Base(sim.data, max_iterations=1)\n",
    "# model.get_densities()\n",
    "# model.forward_pass()\n",
    "# model.backward_pass()\n",
    "# model.calculate_smoothed_probabilities()\n",
    "# # Example: Plotting smoothed probabilities for the first series (k=0)\n",
    "# # Assuming u_hat is already computed and has shape (K, T, N)\n",
    "# k = 0  # Index of the series you want to plot, adjust accordingly\n",
    "\n",
    "# # Aggregate smoothed probabilities over K series if needed, here shown for a specific series\n",
    "# # For aggregation, you might use: u_hat_mean = u_hat.mean(axis=0) for mean probabilities across series\n",
    "#         # Set seaborn style for better aesthetics\n",
    "# sns.set(style='whitegrid')\n",
    "\n",
    "# # Determine unique states for coloring\n",
    "# states = np.unique(sim.full_data[:, 0])\n",
    "# colors = sns.color_palette(\"pastel\", len(states))\n",
    "\n",
    "# # Create a color map based on states\n",
    "# state_colors = {state: colors[i] for i, state in enumerate(states)}\n",
    "# # Plotting\n",
    "# plt.figure(figsize=(17, 4))\n",
    "\n",
    "\n",
    "# # Shade the background based on states\n",
    "# for t in range(model.T):\n",
    "#     state = int(sim.full_data[t, 0])\n",
    "#     plt.axvspan(t, t+1, color=state_colors[state], alpha=0.6)\n",
    "# plt.plot(model.u_hat[k, :, 0], label=f'State {0}')\n",
    "\n",
    "# plt.title('Smoothed Probabilities Over Time')\n",
    "# plt.xlabel('Time')\n",
    "# plt.ylabel('Probability')\n",
    "# plt.legend()\n",
    "# plt.show()\n",
    "\n",
    "# sim.plot_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "74bd1adf-28e3-4aa0-9284-72cdd728aecb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # print(model.mu_hat-sim.mu)\n",
    "# import matplotlib.pyplot as plt\n",
    "# # Compute differences\n",
    "\n",
    "# diff_mu = model.mu - sim.mu\n",
    "\n",
    "# diff_phi = model.phi - sim.phi\n",
    "\n",
    "# diff_sigma = np.sqrt(model.sigma) - sim.sigmas\n",
    "\n",
    "\n",
    "# # Plotting histograms,\n",
    "\n",
    "# fig, axes = plt.subplots(3, 1, figsize=(8, 12))\n",
    "\n",
    "# # Histogram for mu,\n",
    "\n",
    "# axes[0].hist(diff_mu.flatten(), bins=30, alpha=0.7, label='mu')\n",
    "\n",
    "# axes[0].set_title('Histogram of Differences for mu')\n",
    "\n",
    "# axes[0].set_xlabel('Value')\n",
    "\n",
    "# axes[0].set_ylabel('Frequency')\n",
    "\n",
    "# axes[0].legend()\n",
    "\n",
    "\n",
    "\n",
    "# # Histogram for phi\n",
    "\n",
    "# axes[1].hist(diff_phi.flatten(), bins=30, alpha=0.7, label='phi', color='orange')\n",
    "\n",
    "# axes[1].set_title('Histogram of Differences for phi')\n",
    "\n",
    "# axes[1].set_xlabel('Value')\n",
    "\n",
    "# axes[1].set_ylabel('Frequency')\n",
    "\n",
    "# axes[1].legend()\n",
    "\n",
    "\n",
    "\n",
    "# # Histogram for sigma\n",
    "\n",
    "# axes[2].hist(diff_sigma.flatten(), bins=30, alpha=0.7, label='sigma', color='green')\n",
    "\n",
    "# axes[2].set_title('Histogram of Differences for sigma')\n",
    "\n",
    "# axes[2].set_xlabel('Value')\n",
    "\n",
    "# axes[2].set_ylabel('Frequency')\n",
    "\n",
    "# axes[2].legend()\n",
    "\n",
    "\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3b19371d-1a8f-4ca6-ad0d-0ac4d7bc16c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# print('\\n Mu Values')\n",
    "# print(sim.mu)\n",
    "# print('\\n Phi Values')\n",
    "# print(sim.phi)\n",
    "# print('\\n Sigma Values')\n",
    "# print(sim.sigmas)\n",
    "# Set Start Time \n",
    "# start_time = time.time()\n",
    "# # Capture the end time\n",
    "# end_time = time.time()\n",
    "\n",
    "# # Calculate and print the elapsed time\n",
    "# elapsed_time = end_time - start_time\n",
    "# print(f\"The Simulation took {elapsed_time} seconds to execute.\")\n",
    "\n",
    "\n",
    "\n",
    "# # Set Start Time \n",
    "# start_time = time.time()\n",
    "\n",
    "# # Execute the function\n",
    "# model.get_densities()\n",
    "\n",
    "# # Capture the end time\n",
    "# end_time = time.time()\n",
    "\n",
    "# # Calculate and print the elapsed time\n",
    "# elapsed_time = end_time - start_time\n",
    "# print(f\"The Density Generation took {elapsed_time} seconds to execute.\")\n",
    "\n",
    "# # Set Start Time \n",
    "# start_time = time.time()\n",
    "\n",
    "# model.forward_pass()\n",
    "# # Capture the end time\n",
    "# end_time = time.time()\n",
    "\n",
    "# # Calculate and print the elapsed time\n",
    "# elapsed_time = end_time - start_time\n",
    "# print(f\"The Forward Pass took {elapsed_time} seconds to execute.\")\n",
    "\n",
    "\n",
    "# # Set Start Time \n",
    "# start_time = time.time()\n",
    "\n",
    "# model.backward_pass()\n",
    "# # Capture the end time\n",
    "# end_time = time.time()\n",
    "\n",
    "# # Calculate and print the elapsed time\n",
    "# elapsed_time = end_time - start_time\n",
    "# print(f\"The Backward Pass took {elapsed_time} seconds to execute.\")\n",
    "\n",
    "# # Set Start Time \n",
    "# start_time = time.time()\n",
    "\n",
    "# model.calculate_smoothed_probabilities()\n",
    "# # Capture the end time\n",
    "# end_time = time.time()\n",
    "\n",
    "# # Calculate and print the elapsed time\n",
    "# elapsed_time = end_time - start_time\n",
    "# print(f\"The Smoothing took {elapsed_time} seconds to execute.\")\n",
    "\n",
    "# # Set Start Time \n",
    "# start_time = time.time()\n",
    "\n",
    "# model.estimate_state_parameters()\n",
    "# # Capture the end time\n",
    "# end_time = time.time()\n",
    "\n",
    "# # Calculate and print the elapsed time\n",
    "# elapsed_time = end_time - start_time\n",
    "# print(f\"The Parameter_estimation took {elapsed_time} seconds to execute.\")\n",
    "\n",
    "\n",
    "# u_hat_state_0 = model.u_hat[1,:]\n",
    "\n",
    "# # Plotting\n",
    "# plt.plot(u_hat_state_0)\n",
    "# plt.title('u_hat for State 0')\n",
    "# plt.xlabel('Observation')\n",
    "# plt.ylabel('u_hat')\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6c5bdfca-3339-4493-824b-e488ad0b04cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # import numpy as np\n",
    "# # import matplotlib.pyplot as plt\n",
    "\n",
    "# # # Compute the differences for each row as described\n",
    "# # diff_mu_largest = np.max(model.mu, axis=1) - np.max(sim.mu, axis=1)\n",
    "# # diff_mu_smallest = np.min(model.mu, axis=1) - np.min(sim.mu, axis=1)\n",
    "\n",
    "# # diff_phi_largest = np.max(model.phi, axis=1) - np.max(sim.phi, axis=1)\n",
    "# # diff_phi_smallest = np.min(model.phi, axis=1) - np.min(sim.phi, axis=1)\n",
    "\n",
    "# # diff_sigma_largest = np.max(np.sqrt(model.sigma), axis=1) - np.max(sim.sigmas, axis=1)\n",
    "# # diff_sigma_smallest = np.min(np.sqrt(model.sigma), axis=1) - np.min(sim.sigmas, axis=1)\n",
    "\n",
    "# # # Combine the differences for plotting\n",
    "# # diff_mu_combined = np.concatenate((diff_mu_largest, diff_mu_smallest))\n",
    "# # diff_phi_combined = np.concatenate((diff_phi_largest, diff_phi_smallest))\n",
    "# # diff_sigma_combined = np.concatenate((diff_sigma_largest, diff_sigma_smallest))\n",
    "\n",
    "# # Plotting histograms\n",
    "# fig, axes = plt.subplots(3, 1, figsize=(8, 12))\n",
    "\n",
    "# # Histogram for mu differences\n",
    "# axes[0].hist(diff_mu_combined, bins=30, alpha=0.7, label='mu')\n",
    "# axes[0].set_title('Histogram of Differences for mu')\n",
    "# axes[0].set_xlabel('Value')\n",
    "# axes[0].set_ylabel('Frequency')\n",
    "# axes[0].legend()\n",
    "\n",
    "# # Histogram for phi differences\n",
    "# axes[1].hist(diff_phi_combined, bins=30, alpha=0.7, label='phi', color='orange')\n",
    "# axes[1].set_title('Histogram of Differences for phi')\n",
    "# axes[1].set_xlabel('Value')\n",
    "# axes[1].set_ylabel('Frequency')\n",
    "# axes[1].legend()\n",
    "\n",
    "# # Histogram for sigma differences\n",
    "# axes[2].hist(diff_sigma_combined, bins=30, alpha=0.7, label='sigma', color='green')\n",
    "# axes[2].set_title('Histogram of Differences for sigma')\n",
    "# axes[2].set_xlabel('Value')\n",
    "# axes[2].set_ylabel('Frequency')\n",
    "# axes[2].legend()\n",
    "\n",
    "# plt.tight_layout()\n",
    "\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e55b70c-5112-4602-9b47-037e2df96d19",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad2f5ba8-49a2-4faf-9dc0-1048c9e67762",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "547bf1e8-26c2-46d0-affb-98a2c5c19e55",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from importlib import reload\n",
    "# reload(EM)\n",
    "# reload(Tools)\n",
    "# from Tools import AR\n",
    "# from EM import Base\n",
    "# # reload(EM)\n",
    "# # from EM import Base\n",
    "# O = 1000\n",
    "# K = 10\n",
    "# N = 2\n",
    "# # phi_vals = np.zeros((K,N))\n",
    "# sim2 = AR(n_states=N, K_series = K, num_obs = O,transition_diagonal=0.99, deterministic=True)\n",
    "# # print('\\n Mu Values')\n",
    "# # print(sim.mu)\n",
    "# # print('\\n Phi Values')\n",
    "# # print(sim.phi)\n",
    "# # print('\\n Sigma Values')\n",
    "# # print(sim.sigmas)\n",
    "# # Set Start Time \n",
    "# # start_time = time.time()\n",
    "\n",
    "# sim2.simulate()\n",
    "# model2 = Base(sim2.data, max_iterations=50)\n",
    "# model2.fit()\n",
    "# print(model2.mu-sim2.mu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a80d0b5f-50fe-453b-9fd6-706e8a5c494d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # print(model.mu_hat-sim.mu)\n",
    "# import matplotlib.pyplot as plt\n",
    "# # Compute differences\n",
    "\n",
    "# diff_mu2 = model2.mu - sim2.mu\n",
    "\n",
    "# diff_phi2 = model2.phi - sim2.phi\n",
    "\n",
    "# diff_sigma2 = np.sqrt(model2.sigma) - sim2.sigmas\n",
    "\n",
    "\n",
    "# # Plotting histograms,\n",
    "\n",
    "# fig, axes = plt.subplots(3, 1, figsize=(8, 12))\n",
    "\n",
    "# # Histogram for mu,\n",
    "\n",
    "# axes[0].hist(diff_mu.flatten(), bins=30, alpha=0.7, label='mu')\n",
    "\n",
    "# axes[0].set_title('Histogram of Differences for mu')\n",
    "\n",
    "# axes[0].set_xlabel('Value')\n",
    "\n",
    "# axes[0].set_ylabel('Frequency')\n",
    "\n",
    "# axes[0].legend()\n",
    "\n",
    "\n",
    "\n",
    "# # Histogram for phi\n",
    "\n",
    "# axes[1].hist(diff_phi.flatten(), bins=30, alpha=0.7, label='phi', color='orange')\n",
    "\n",
    "# axes[1].set_title('Histogram of Differences for phi')\n",
    "\n",
    "# axes[1].set_xlabel('Value')\n",
    "\n",
    "# axes[1].set_ylabel('Frequency')\n",
    "\n",
    "# axes[1].legend()\n",
    "\n",
    "\n",
    "\n",
    "# # Histogram for sigma\n",
    "\n",
    "# axes[2].hist(diff_sigma.flatten(), bins=30, alpha=0.7, label='sigma', color='green')\n",
    "\n",
    "# axes[2].set_title('Histogram of Differences for sigma')\n",
    "\n",
    "# axes[2].set_xlabel('Value')\n",
    "\n",
    "# axes[2].set_ylabel('Frequency')\n",
    "\n",
    "# axes[2].legend()\n",
    "\n",
    "\n",
    "\n",
    "# plt.tight_layout()\n",
    "\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d4cdd1f-6865-49b2-9260-a63e9143c2b3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abeee9d9-84a7-43b9-b60e-00ab6492b9c0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c25cab03-6e0d-4ee6-80ee-1a8d28217381",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76814da7-5ae3-4b6f-bf2d-d39c55fc8f37",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb8dc577-adb7-4208-b585-621624b03bc9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d3dec36-89e6-4714-bcb5-687f26ea0e71",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39135960-5b3d-42ca-b0a6-be82fb5ec478",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cebc1101-6970-4d14-98de-70dc50410213",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3ab1b36-9bda-4037-8b0e-ba7342e36ad8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2f07584-1f85-4efb-9348-0e182dc501b7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
